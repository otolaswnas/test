**Najpro≈õciej: Go templates w Helm to ‚Äûprogramowanie w YAML-u‚Äù. Masz plik `values.yaml` (dane wej≈õciowe), szablon z logikƒÖ (`if`, `range`, `with`, `define/include`), a Helm generuje wynikowy manifest. Poka≈ºƒô Ci ka≈ºdy komponent krok po kroku: warto≈õci ‚Üí szablon ‚Üí wynik.**

---

# 1. **if / else**

### values.yaml
```yaml
ingress:
  enabled: true
```

### szablon
```yaml
{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app
{{- else }}
# Ingress wy≈ÇƒÖczony
{{- end }}
```

### wynik
```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app
```

---

# 2. **range** (pƒôtla)

### values.yaml
```yaml
extraEnv:
  - name: ENV
    value: prod
  - name: DEBUG
    value: "false"
```

### szablon
```yaml
env:
{{- range .Values.extraEnv }}
  - name: {{ .name }}
    value: {{ .value | quote }}
{{- end }}
```

### wynik
```yaml
env:
  - name: ENV
    value: "prod"
  - name: DEBUG
    value: "false"
```

---

# 3. **with** (zmiana kontekstu)

### values.yaml
```yaml
resources:
  limits:
    cpu: "500m"
    memory: "512Mi"
```

### szablon
```yaml
{{- with .Values.resources }}
resources:
  limits:
    cpu: {{ .limits.cpu }}
    memory: {{ .limits.memory }}
{{- end }}
```

### wynik
```yaml
resources:
  limits:
    cpu: 500m
    memory: 512Mi
```

---

# 4. **define / include** (funkcje szablonowe)

### helpers.tpl
```yaml
{{- define "myapp.labels" -}}
app: my-app
release: {{ .Release.Name }}
{{- end }}
```

### szablon
```yaml
metadata:
  labels:
{{ include "myapp.labels" . | nindent 4 }}
```

### wynik
```yaml
metadata:
  labels:
    app: my-app
    release: my-release
```

---

# 5. **funkcje i potoki**

### values.yaml
```yaml
service:
  type: ""
  port: 8080
```

### szablon
```yaml
spec:
  type: {{ .Values.service.type | default "ClusterIP" }}
  ports:
    - port: {{ .Values.service.port }}
```

### wynik
```yaml
spec:
  type: ClusterIP
  ports:
    - port: 8080
```

---

# 6. **globalny kontekst `$.`**

### values.yaml
```yaml
hosts:
  - api.example.com
  - app.example.com
```

### szablon
```yaml
{{- range .Values.hosts }}
- host: {{ . }}
  name: {{ $.Release.Name }}-{{ . | replace "." "-" }}
{{- end }}
```

### wynik
```yaml
- host: api.example.com
  name: my-release-api-example-com
- host: app.example.com
  name: my-release-app-example-com
```

---

# ‚úÖ Podsumowanie

- **if/else** ‚Üí warunki (wstawia fragmenty tylko gdy spe≈Çnione).  
- **range** ‚Üí pƒôtle po listach/mapach.  
- **with** ‚Üí skraca ≈õcie≈ºki do zagnie≈ºd≈ºonych warto≈õci.  
- **define/include** ‚Üí reu≈ºywalne fragmenty (jak funkcje).  
- **funkcje/pipelines** ‚Üí transformacje (`default`, `quote`, `toYaml`, `nindent`).  
- **$.** ‚Üí odwo≈Çanie do globalnego kontekstu, gdy jeste≈õ w pƒôtli.  

---

üëâ Chcesz, ≈ºebym przygotowa≈Ç **pe≈Çny mini-chart** (plik `Chart.yaml`, `values.yaml`, `templates/deployment.yaml`) i pokaza≈Ç jak wyglƒÖda wynik `helm template`? To da Ci kompletny obraz procesu od A do Z.
