#!/bin/bash

VAULT_ADDR="http://vault.example.com:8200"
VAULT_USER="twoj_uzytkownik"
VAULT_PASS="twoje_haslo"
SECRET_PATH="secret/data/mysecret"  # zmień jeśli KV v1 na: secret/mysecret

# 1. Logowanie
VAULT_TOKEN=$(curl -s \
  --request POST \
  --data "{\"password\": \"${VAULT_PASS}\"}" \
  "${VAULT_ADDR}/v1/auth/userpass/login/${VAULT_USER}" \
  | jq -r '.auth.client_token')

if [ -z "$VAULT_TOKEN" ] || [ "$VAULT_TOKEN" == "null" ]; then
  echo "❌ Błąd: nie udało się pobrać tokena" >&2
  exit 1
fi

echo "✅ Token pobrany: $VAULT_TOKEN"

# 2. Pobranie sekretu
RESPONSE=$(curl -s \
  -H "X-Vault-Token: ${VAULT_TOKEN}" \
  "${VAULT_ADDR}/v1/${SECRET_PATH}")

echo "🔍 Pełna odpowiedź z Vault:"
echo "$RESPONSE" | jq .

# 3. Jeśli KV v2 - same dane:
if [[ "$SECRET_PATH" == *"data/"* ]]; then
  echo "📦 Dane sekreta:"
  echo "$RESPONSE" | jq -r '.data.data'
fi


------
max(
  (
    (kafka_server_BrokerState{instance="broker1:7071"} >= 0)
    and on (instance) (rate(kafka_server_BrokerTopicMetrics_BytesInTotal{instance="broker1:7071"}[5m]) > 0)
    > bool 0
  )
  or on() (absent(kafka_server_BrokerState{instance="broker1:7071"}) * 0)
)

--

max(
  (
    (kafka_controller_ControllerStats_activeControllerCount{instance="controller1:7071"} >= 0)
    and on (instance) (rate(kafka_server_BrokerTopicMetrics_BytesInTotal{instance="controller1:7071"}[5m]) > 0)
    > bool 0
  )
  or on() (absent(kafka_controller_ControllerStats_activeControllerCount{instance="controller1:7071"}) * 0)
)

--------------------------------


(prometheus_build_info{job="prometheus"} == 1)
and (process_start_time_seconds{job="prometheus"} > 0)
and (increase(prometheus_tsdb_head_samples_appended_total{job="prometheus"}[5m]) > 0)
and (increase(prometheus_target_scrapes_total{job="prometheus"}[5m]) > 0)
--------------------
#!/bin/bash
# Skrypt: pokazuje szczegóły wszystkich certyfikatów w pliku PEM
# Użycie: ./show_certs.sh plik.pem

# Sprawdzenie argumentów
if [ $# -ne 1 ]; then
    echo "Użycie: $0 plik_z_cert.pem"
    exit 1
fi

CERT_FILE="$1"

# Sprawdzenie czy plik istnieje
if [ ! -f "$CERT_FILE" ]; then
    echo "Błąd: plik '$CERT_FILE' nie istnieje"
    exit 1
fi

# Przetwarzanie certyfikatów po kolei
csplit -f cert_part_ -b "%02d.pem" "$CERT_FILE" '/-----BEGIN CERTIFICATE-----/' '{*}' > /dev/null 2>&1

for cert in cert_part_*.pem; do
    if grep -q "BEGIN CERTIFICATE" "$cert"; then
        echo "========== Certyfikat: $cert =========="
        openssl x509 -noout -text -in "$cert"
        echo ""  # pusty wiersz między certyfikatami
    fi
    rm -f "$cert"  # usuwanie pliku tymczasowego
done
-------------
#!/bin/bash

# Parametry (możesz przekazać jako zmienne środowiskowe lub argumenty)
CERT="server.crt"
KEY="server.key"
CA="ca.crt"
P12="server.p12"
P12_ALIAS="myserver"
P12_PASS="p12haslo"
KEYSTORE="keystore.jks"
KEYSTORE_PASS="keystorehaslo"
TRUSTSTORE="truststore.jks"
TRUSTSTORE_PASS="truststorehaslo"
TRUSTSTORE_ALIAS="myca"

# 1. Tworzenie PKCS#12
openssl pkcs12 -export \
  -in "$CERT" \
  -inkey "$KEY" \
  -certfile "$CA" \
  -name "$P12_ALIAS" \
  -out "$P12" \
  -password pass:"$P12_PASS"

echo "PKCS#12 zapisany jako $P12"

# 2. Tworzenie keystore JKS z PKCS#12
keytool -importkeystore \
  -deststorepass "$KEYSTORE_PASS" \
  -destkeypass "$KEYSTORE_PASS" \
  -destkeystore "$KEYSTORE" \
  -srckeystore "$P12" \
  -srcstoretype PKCS12 \
  -srcstorepass "$P12_PASS" \
  -alias "$P12_ALIAS" \
  -noprompt

echo "Keystore JKS zapisany jako $KEYSTORE"

# 3. Tworzenie truststore JKS i import CA
keytool -importcert \
  -trustcacerts \
  -alias "$TRUSTSTORE_ALIAS" \
  -file "$CA" \
  -keystore "$TRUSTSTORE" \
  -storepass "$TRUSTSTORE_PASS" \
  -noprompt

echo "Truststore JKS zapisany jako $TRUSTSTORE"
