
processors:
  - dissect:
      tokenizer: '%{ts} %{+ts} %{tz}:%{device}:%{message}'
      field: "message"
      target_prefix: ""


---------------------


curl -XPUT localhost:9200/_cluster/settings -d '{
  "persistent": {
    "cluster.routing.allocation.disk.watermark.low": "90%",
    "cluster.routing.allocation.disk.watermark.high": "95%"
  }
}'
-------------------------------------------------------------
from elasticsearch import Elasticsearch, exceptions

try:
    es = Elasticsearch(
        ['localhost', 'otherhost'],
        http_auth=('user', 'secret'),
        scheme="https",
        port=443,
        use_ssl=True,
        verify_certs=True,
        ca_certs='/sciezka/do/twojego/certyfikatu.pem'
    )

    # Sprawdź, czy serwer Elasticsearch jest dostępny
    if not es.ping():
        print("Nie można połączyć się z serwerem Elasticsearch!")
        exit()

    # Założenie polityki ILM
    policy = {
        "policy": {
            "phases": {
                "hot": {
                    "actions": {
                        "rollover": {
                            "max_size": "25GB"
                        }
                    }
                }
            }
        }
    }

    es.ilm.put_lifecycle(name='my_policy', body=policy)

except exceptions.ConnectionError:
    print("Błąd połączenia z serwerem Elasticsearch.")
except exceptions.RequestError:
    print("Błąd żądania. Sprawdź swoje dane wejściowe.")
except exceptions.TransportError:
    print("Błąd transportu podczas komunikacji z serwerem Elasticsearch.")
except Exception as e:
    print(f"Napotkano nieoczekiwany błąd: {e}")

------------------------------------------------------------
import requests
from requests.auth import HTTPBasicAuth

# Adres URL hosta Kibana
kibana_url = "http://localhost:5601"

# Definicja przestrzeni
space_definition = {
    "id": "my_space",
    "name": "My Space",
    "description" : "This is my space"
}

# Dane uwierzytelniające
username = "your_username"
password = "your_password"

# Tworzenie przestrzeni za pomocą API Kibana
response = requests.post(
    f"{kibana_url}/api/spaces/space",
    json=space_definition,
    auth=HTTPBasicAuth(username, password)
)

# Sprawdzenie odpowiedzi
if response.status_code == 200:
    print("Space created successfully")
else:
    print(f"Failed to create space: {response.content}")


-----------------------------------------------
from elasticsearch import Elasticsearch
from requests.auth import HTTPBasicAuth
import requests

# Adres URL hosta Kibana
kibana_url = "http://localhost:5601"

# Definicja przestrzeni
space_definition = {
    "id": "my_space",
    "name": "My Space",
    "description" : "This is my space"
}

# Połączenie z Elasticsearch
es = Elasticsearch(
    ['localhost'],
    http_auth=('elastic', 'password'),
    scheme="http",
    port=9200,
)

# Pobranie danych uwierzytelniających z Elastic Keystore
credentials = es.get('my_keystore')

# Dane uwierzytelniające
username = credentials['_source']['username']
password = credentials['_source']['password']

# Tworzenie przestrzeni za pomocą API Kibana
response = requests.post(
    f"{kibana_url}/api/spaces/space",
    json=space_definition,
    auth=HTTPBasicAuth(username, password)
)

# Sprawdzenie odpowiedzi
if response.status_code == 200:
    print("Space created successfully")
else:
    print(f"Failed to create space: {response.content}")


-----------------------------------------------------------------
import requests

# Adres URL hosta Kibana
kibana_url = "http://localhost:5601"

# Definicja przestrzeni
space_definition = {
    "id": "my_space",
    "name": "My Space",
    "description" : "This is my space"
}

# Tworzenie przestrzeni za pomocą API Kibana
response = requests.post(f"{kibana_url}/api/spaces/space", json=space_definition)

# Sprawdzenie odpowiedzi
if response.status_code == 200:
    print("Space created successfully")
else:
    print(f"Failed to create space: {response.content}")
